---
import type { IResumeProps as Props } from '@types';
import { getExperience, getGitHubUrl, getLinkedInUrl } from '@utils';
import { resumeDateFormat } from '@utils/constants';
import { locales, useTranslation } from '@utils/i18n';
import { format } from 'date-fns';

const { experience: _experience, skills: _skills, ...info } = Astro.props;
const linkedInUrl = getLinkedInUrl(info.links.linkedin);
const gitHubUrl = getGitHubUrl(info.links.github);
const experience = getExperience(_experience, 'job');
const education = getExperience(_experience, 'education');
const skills = _skills;

const lang = Astro.currentLocale;
const { t } = await useTranslation(lang, 'resume');
const locale =
  lang && lang in locales ? locales[lang as keyof typeof locales] : locales.en;
---

<article
  class="size-full bg-surface text-on-surface py-10 px-20 font-resume-serif
                prose prose-sm max-w-none
                prose-headings:text-on-surface prose-a:text-on-surface prose-li:text-on-surface prose-headings:m-0 prose-h2:mb-3 prose-li:m-0 prose-p:mt-0 prose-p:mb-2"
>
  <section>
    <h1>{info.name.fullname}</h1>
    <h2>{info.jobPosition}</h2>
    <ul class="list-none pl-0 mt-4 mb-5">
      <li><a href={`tel:${info.phone}`}>{info.phone}</a></li>
      <li><a href={`mailto:${info.email}`}>{info.email}</a></li>
      <li>{info.location.city}, {info.location.country}</li>
      <li>
        LinkedIn: {info.links.linkedin} (<a href={linkedInUrl} target="_blank"
          >{linkedInUrl}</a
        >)
      </li>
      <li>
        GitHub: {info.links.github} (<a href={gitHubUrl} target="_blank"
          >{gitHubUrl}</a
        >)
      </li>
      <li>
        {t('website')}: <a href={info.links.website} target="_blank"
          >{info.links.website}</a
        >
      </li>
    </ul>
    <h5>{t('key-skills')}</h5>
    <p class="capitalize">{info.tags.join(', ')}</p>
  </section>
  <section>
    <h2>{t('experience')}</h2>
    <ul>
      {
        experience.map((item) => (
          <li>
            <Fragment>
              <time>
                {format(new Date(item.startAt), resumeDateFormat, { locale })}
              </time>{' '}
              -{' '}
              {item.endAt && (
                <time>
                  {format(new Date(item.endAt), resumeDateFormat, { locale })}
                </time>
              )}
            </Fragment>
            <h3>{item.organization.name}</h3>
            <h5>{item.position}</h5>
            <p>{item.description}</p>
            <ul class="list-none pl-0">
              {item.projects &&
                item.projects.map((project) => (
                  <li>
                    <h4>{project.name}</h4>
                    {Array.isArray(project.description) ? (
                      <ul>
                        {project.description.map((desc) => (
                          <li>{desc}</li>
                        ))}
                      </ul>
                    ) : (
                      <p>{project.description}</p>
                    )}
                  </li>
                ))}
            </ul>
          </li>
        ))
      }
    </ul>
  </section>
  <section class="grid grid-cols-2 w-full break-after-auto">
    <section>
      <h2>{t('education')}</h2>
      <ul>
        {
          education.map((item) => (
            <li>
              <h3>{item.organization.name}</h3>
              <h5>
                {t('education-description', {
                  degree: item.position,
                  major: item.organization.department,
                })}
              </h5>
              <p>{item.description}</p>
            </li>
          ))
        }
      </ul>
    </section>
    <section>
      <h2>{t('skills')}</h2>
      <ul>
        {skills.map((skill) => <li class="capitalize">{skill.label}</li>)}
      </ul>
    </section>
  </section>
</article>
