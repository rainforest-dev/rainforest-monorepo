---
import { argbFromHex, hexFromArgb } from '@material/material-color-utilities';
import {
  getSchemeProperties,
  themeFromSourceColor,
} from '@rainforest-dev/rainforest-ui';
import { persistentKey } from '@stores';
import { defaultSourceColor } from '@utils/constants';

const sourceColor =
  Astro.cookies.get(persistentKey)?.value ?? defaultSourceColor;
const theme = themeFromSourceColor(argbFromHex(sourceColor));
const getSchemeStyles = (properties: { [key: string]: number }) => {
  return Object.entries(properties)
    .map(([k, v]) => `${k}: ${hexFromArgb(v)};`)
    .join('\n');
};

const styleRaw = `
  @layer theme, base, components, utilities, app;
  @layer app {
    @media (prefers-color-scheme: light) {
      :root {
        ${getSchemeStyles(getSchemeProperties(theme.schemes.light))}
      }
    }
    @media (prefers-color-scheme: dark) {
      :root {
        ${getSchemeStyles(getSchemeProperties(theme.schemes.dark))}
      }
    }
  }
`;
---

<style is:inline set:html={styleRaw}></style>
<script>
  import { persistentKey, sourceColor as $sourceColor } from '@stores';
  import Cookies from 'js-cookie';
  const sourceColor = $sourceColor.get();
  if (sourceColor) {
    Cookies.set(persistentKey, sourceColor);
  }
</script>
<!-- <script>
  import { sourceColor, updateColorScheme } from '@stores';
  import { applyTheme } from '@utils/md3-utilities';

  window
    .matchMedia('(prefers-color-scheme: dark)')
    .addEventListener('change', (e) => {
      const dark = e.matches;
      updateColorScheme(dark);
      if (sourceColor.value) applyTheme(sourceColor.value, dark);
    });
</script> -->
