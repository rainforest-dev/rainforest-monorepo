---
import {
  argbFromHex,
  themeFromSourceColor,
} from '@material/material-color-utilities';
import { persistentColorSchemeKey, persistentKey } from '@stores';
import { defaultSourceColor } from '@utils/constants';
import { getSchemeProperties } from '@utils/md3-utilities';

const dark = Astro.cookies.get(persistentColorSchemeKey)?.value === 'true';
const sourceColor =
  Astro.cookies.get(persistentKey)?.value ?? defaultSourceColor;
const theme = themeFromSourceColor(argbFromHex(sourceColor));
const scheme = dark ? theme.schemes.dark : theme.schemes.light;
const properties = getSchemeProperties(scheme);

const styleRaw = `
  @layer theme {
    :root {
      ${Object.entries(properties)
        .map(([k, v]) => `${k}: ${v};`)
        .join('\n')}
    }
  }
`;
---

<style is:inline set:html={styleRaw}></style>
<script>
  import { persistentKey, sourceColor as $sourceColor } from '@stores';
import Cookies from 'js-cookie';
  const sourceColor = $sourceColor.get();
  if (sourceColor) {
    Cookies.set(persistentKey, sourceColor);
  }
</script>
<script>
  import { sourceColor, updateColorScheme } from '@stores';
  import { applyTheme } from '@utils/md3-utilities';

  window
    .matchMedia('(prefers-color-scheme: dark)')
    .addEventListener('change', (e) => {
      const dark = e.matches;
      updateColorScheme(dark);
      if (sourceColor.value) applyTheme(sourceColor.value, dark);
    });
</script>
