---
import { SourceColor } from '@components';
import {
  ContactForm,
  Footer,
  Nav,
  OneColumns,
  ThreeColumns,
} from '@components/home';
import Experiences from '@components/home/experiences/index.astro';
import Layout from '@layouts/index.astro';
import { IHeroProps } from '@types';
import { getBrandIconName } from '@utils';
import { links } from '@utils/constants';
import { hero, info } from '@utils/constants';
import { supportedLngs, useTranslation } from '@utils/i18n';
import type { ImageMetadata } from 'astro';
import { getCollection, render } from 'astro:content';
import { getRelativeLocaleUrl } from 'astro:i18n';

export const prerender = true;
export async function getStaticPaths() {
  return supportedLngs.map((lng) => ({
    params: { lang: lng },
  }));
}

const profiles = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/images/profile/*.{jpeg,jpg,png,gif,webp}'
);
// randomly select a image from dict
const profile =
  Object.values(profiles)[
    Math.floor(Math.random() * Object.keys(profiles).length)
  ]();

const { lang = 'en' } = Astro.params;
const { t } = await useTranslation(lang, 'home');

const pathnameWithoutLang = Astro.url.pathname.replaceAll(`/${lang}`, '');

const navProps: Parameters<typeof Nav>[0] = {
  anchors: [
    {
      label: t('experience'),
      href: '#experience',
    },
    {
      label: t('skills'),
      href: '#skills',
    },
  ],
  langs: supportedLngs.map((l) => ({
    key: l,
    label: t(`common:${l}`),
    href: getRelativeLocaleUrl(l, pathnameWithoutLang),
  })),
  sections: [
    {
      title: t('resources'),
      links: links.internal.map((link) => ({
        label: t(link.key),
        href: link.href,
      })),
    },
    {
      title: t('social-media'),
      links: links.external.map((link) => ({
        label: t(link.key),
        href: link.href,
      })),
    },
  ],
};

const heroProps: IHeroProps = {
  name: {
    first: t('info-name-first', { context: 'informal' }),
    last: t('info-name-last', { context: 'informal' }),
    fullname: t('info-fullname', { context: 'informal' }),
  },
  profile,
  dateOfBirth: new Date(info.dateOfBirth),
  jobPosition: t('info-job-position'),
  location: {
    city: t('info-location', { context: 'city' }),
    country: t('info-location', { context: 'country' }),
  },
  summaries: [
    t('home:hero-summaries.0'),
    t('home:hero-summaries.1'),
    t('home:hero-summaries.2'),
  ],
  tags: hero.tags,
};

const skills = await getCollection('skills', (item) =>
  item.id.startsWith(lang)
);
---

<Layout title={t('metadata-title')} description={t('metadata-description')}>
  <main class="contents">
    <Nav client:load {...navProps}>
      <ContactForm slot="sider" id="contact-form-menu" />
    </Nav>
    <div class="fixed right-10 bottom-10 z-10">
      <SourceColor client:only="vue" />
    </div>
    <!-- hero -->
    <section class="flex-center container h-screen xl:flex hidden">
      <ThreeColumns {...heroProps} />
    </section>
    <section class="flex xl:hidden w-full">
      <OneColumns {...heroProps} />
    </section>
    <!-- experience -->
    <section id="experience" class="py-10">
      <div class="container flex-col-center size-full">
        <h2 class="text-4xl mb-10">{t('experience')}</h2>
        <Experiences />
      </div>
    </section>
    <section id="skills" class="py-10 min-h-screen flex flex-col">
      <div class="container grow min-h-[90vh]">
        <h2 class="text-4xl mb-10">{t('skills')}</h2>
        <ul class="grid md:grid-cols-2 xl:grid-cols-3 gap-4 xl:gap-8">
          {
            skills.map(async (skill) => {
              const { Content } = await render(skill);
              return (
                <li class="min-w-80 bg-surface-container text-on-surface px-5 py-4 rounded min-h-80 shadow-lg flex flex-col gap-5 relative **:[li]:list-disc **:[li]:list-inside">
                  <h3 class="text-xl capitalize">{skill.data.name}</h3>
                  <Content />
                  <iconify-icon
                    icon={getBrandIconName(skill.data.icon)}
                    class="absolute right-5 bottom-4 size-12"
                    height="none"
                  />
                </li>
              );
            })
          }
        </ul>
      </div>
      <Footer />
    </section>
  </main>
  <style>
    @reference '../../app.css';
    html {
      @apply snap-y snap-mandatory overscroll-none scroll-smooth bg-inverse-surface xl:bg-surface;
    }
    main > section {
      @apply snap-always snap-start bg-surface;
    }
  </style>
</Layout>
